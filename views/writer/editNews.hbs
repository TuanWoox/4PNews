{{#section 'css'}}
<link rel="stylesheet" href="/stylesheets/writer/add_news_writer.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@yaireo/tagify@4.4.0/dist/tagify.css">
{{/section}}
<div class="container my-5">
  <div class="row-1 my-5 border-bottom border-2 border-dark">
    <div class="col-9">
      <h3>THÊM BÀI VIẾT</h3>
    </div>
  </div>
  <form id="editForm" method="POST" action="/writer/{{news.author._id}}/viewNews/{{news._id}}?_method=PATCH">
    <!-- Nội dung -->
    <div class="row-5 my-5 border-bottom border-2 border-dark">
      <div class="mb-3">
        <label for="title" class="form-label">
          <h5>Tiêu đề</h5>
        </label>
        <input type="text" class="form-control" id="title" placeholder="Ghi tiêu đề bài viết của bạn ở đây!"
          name="news[title]" required value="{{news.title}}" />
      </div>
      <div class="mb-3">
        <label for="summary_content" class="form-label">
          <h5>Tóm tắt nội dung</h5>
        </label>
        <textarea class="form-control" id="summary_content" rows="3"
          placeholder="Ghi tóm tắt nội dung bài viết của bạn ở đây!" name="news[brief]"
          required>{{news.brief}}</textarea>
      </div>
      <div class="form-group">
        <label for="content">
          <h5>Nội dung</h5>
        </label>
        <textarea class="form-control content" name="news[content]" id="tinymce-content" rows="5"
          placeholder="Viết nội dung của bạn..." required name="news[content]"> {{news.content}} </textarea>
      </div>
      <div class="my-3">
        <label for="premium" class="form-label">
          <h5>Loại bài viết</h5>
        </label>
        <select class="form-select" id="premium" name="news[premium]" required>
          <option value="true" {{#if news.isPremium}}selected{{/if}}>Premium</option>
          <option value="false" {{#unless news.isPremium}}selected{{/unless}}>Thông thường</option>
        </select>
      </div>
      <div class="my-3">
        <label for="premium" class="form-label">
          <h5>Chỉ mục chính</h5>
        </label>
        <select class="form-select" id="mainCategory" required>
          {{#each allMainCate}}
          <option value="{{id}}" {{#if (eq id ../news.category.belongTo)}} selected {{/if}}>{{name}}</option>
          {{/each}}
        </select>
      </div>
      <div class="my-3">
        <label for="premium" class="form-label">
          <h5>Chỉ mục phụ</h5>
        </label>
        <select class="form-select" id="subCategory" required name="news[category]">
          {{#each subOfMainCate}}
          <option value="{{id}}" {{#if (eq id ../news.category._id)}} selected {{/if}}>{{name}}</option>
          {{/each}}
        </select>
      </div>
      <div class="mb-3">
        <label for="tags" class="form-label">
          <h5>Tags (cách nhau bằng dấu tab)</h5>
        </label>
        <input type="text" class="form-control" id="tags" name="news[tags]" required value='{{tagsJson}}'>
      </div>
    </div>

    <input type="hidden" name="news[newsImages]" id="newsImages">
    <input type="hidden" name="news[deletedImages]" id="deletedImages">
    <!-- button -->
    <div class="row-1 control d-flex justify-content-end">
      <a href="/writer/{{currentUser._id}}/writerNews" class="btn btn-danger min-width mx-2">Hủy</a>
      <button type="submit" class="btn btn-success min-width mx-2" id="submit-button">
        Nộp
      </button>
    </div>
  </form>
</div>
{{#section 'js'}}
<script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify@4.4.0/dist/tagify.min.js"></script>
<script>
  const tagInputElement = document.querySelector("#tags");

  const tagify = new Tagify(tagInputElement, {
    whitelist: [],
    dropdown: {
      enabled: 0,
      closeOnSelect: true
    }
  });
  tagify.on('input', onInput)
  function onInput(e) {
    var value = e.detail.value
    tagify.whitelist = null // reset the whitelist

    // show loading animation.
    tagify.loading(true)

    fetch('/api/suggestTagByLetter?letter=' + value)
      .then(RES => RES.json())
      .then(function (newWhitelist) {
        tagify.whitelist = newWhitelist.map(tag => tag.name);
        tagify.loading(false).dropdown.show(value) // render the suggestions dropdown
      })
  }
</script>
<script>
  const mainCategory = document.querySelector('#mainCategory');
  const subCategory = document.querySelector('#subCategory');
  mainCategory.addEventListener('change', async (event) => {
    const mainCategoryId = event.target.value;
    const response = await fetch(`/api/getSubCategories/${mainCategoryId}`);
    const subcategories = await response.json();
    subCategory.innerHTML = '';
    subcategories.forEach((subcategory) => {
      console.log(subcategory);
      const option = document.createElement('option');
      option.value = subcategory._id;
      option.textContent = subcategory.name;
      subCategory.appendChild(option);
    });
  })
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script type="application/javascript" src="/tinymce/tinymce.min.js"></script>
<!-- Script element sourcing the TinyMCE configuration -->
<script type="application/javascript">
  let imagesToUploadBlob = []; // Array to keep images locally
  let imagesOfPost = `${{{ imagesOfPost }}}`;
  imagesOfPost = imagesOfPost.slice(1); // Remove the leading '$' character
  imagesOfPost = JSON.parse(imagesOfPost);
  let deleteImages = [];

  tinymce.init({
    selector: 'textarea#tinymce-content',
    plugins: 'image link code table lists preview wordcount fullscreen emoticons',
    toolbar: 'undo redo | formatselect | bold italic underline | alignleft aligncenter alignright alignjustify | ' +
      'bullist numlist outdent indent | link image | code preview fullscreen | emoticons',
    images_upload_handler: async function (blobInfo, progress) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
          const blobUrl = URL.createObjectURL(blobInfo.blob());
          imagesToUploadBlob.push({
            blob: blobInfo.blob(),
            url: blobUrl,
          });
          resolve(blobUrl);
        };
        reader.onerror = () => reject({ message: 'Image upload failed' });
        reader.readAsDataURL(blobInfo.blob());
      });
    },
  });

  document.querySelector('#submit-button').addEventListener('click', async (evt) => {
    evt.preventDefault();
    const button = document.querySelector('#submit-button');
    button.disabled = true;
    let content = tinymce.activeEditor.getContent();
    // Show SweetAlert loading popup
    Swal.fire({
      title: 'Đang sửa bài viết',
      text: 'Vui lòng chờ trong khi bài viết của bạn đang được sửa...',
      icon: 'info',
      allowOutsideClick: false,
      showConfirmButton: false,
      willOpen: () => {
        Swal.showLoading(); // Show spinner
      }
    });
    try {
      // Make a list of all images in content
      const currentImagesInContent = Array.from(tinymce.activeEditor.getDoc().querySelectorAll('img')).map(img => img.src);

      // Filter out the ones that are still in content
      const imagesToUpload = imagesToUploadBlob.filter(image => currentImagesInContent.includes(image.url));

      // Check if any of the post images have been deleted
      imagesOfPost.forEach(image => {
        if (!currentImagesInContent.includes(image.url)) {
          deleteImages.push(image.filename);
        }
      });

      // Upload to Cloudinary
      const uploadResults = await Promise.all(imagesToUpload.map(image => sendImageToCloud(image.blob)));

      // Replace Image URL (blob: source) to Cloudinary URL
        uploadResults.forEach((result, index) => {
            const { url, filename } = result;
            content = content.replace(imagesToUpload[index].url, url);
        });

      tinymce.activeEditor.setContent(content);

      // Set new uploaded images with thumbnail URLs
      const images = uploadResults.map(({ url, filename }) => ({ url, filename }));
      document.querySelector('#newsImages').value = JSON.stringify(images);

      // Set deleted images 
      document.querySelector('#deletedImages').value = JSON.stringify(deleteImages);
      Swal.close(); // Close the SweetAlert popup
      // Submit the form
      document.querySelector('#editForm').submit();
    } catch (error) {
      console.error("Failed to upload image(s):", error);
    }
  });

  async function sendImageToCloud(imageBlob) {
    const url = '/api/imageHandler/upload';
    const formData = new FormData();
    formData.append('image', imageBlob, 'image.jpg');

    const response = await fetch(url, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      throw new Error(`Server error: ${ response.status } `);
    }
    const result = await response.json();
    return result;
  }

</script>


{{/section}}